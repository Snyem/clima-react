{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","titulo","Formulario","ciudadRef","React","createRef","paisRef","obtenerDatos","e","preventDefault","datos","ciudad","_this","current","value","pais","datosConsulta","onSubmit","this","id","type","ref","htmlFor","defaultValue","Component","Error","mensaje","Clima","mostrarResultado","_this$props$resultado","resultado","name","weather","main","urlIcono","concat","icon","alt","temp","toFixed","src","temp_max","temp_min","App","state","error","consulta","consultarApi","_this$state$consulta","url","console","log","fetch","then","respuesta","json","setState","catch","prevProps","prevState","cod","componentes_Error","componentes_Clima","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.70c84d8f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = props => {\r\n    return(\r\n        <div>\r\n            <nav>\r\n                <div className = \"nav-wrapper light-blue darken-2\">\r\n                    <a href=\"/\" className = \"brand-logo\">{props.titulo}</a>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Formulario extends Component {\r\n\r\n    ciudadRef = React.createRef();\r\n    paisRef = React.createRef();\r\n   \r\n    obtenerDatos = (e) => {\r\n        e.preventDefault();\r\n\r\n        //leer datos y crear objeto\r\n        const datos = {\r\n            ciudad : this.ciudadRef.current.value,\r\n            pais : this.paisRef.current.value\r\n        }\r\n\r\n        //enviar objeto a componente padre\r\n        this.props.datosConsulta(datos);\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"contenedor-form\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <form onSubmit = {this.obtenerDatos}>\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <input id=\"ciudad\" type=\"text\" ref={this.ciudadRef}/>\r\n                                <label htmlFor=\"ciudad\">Ciudad: </label>\r\n                            </div>\r\n\r\n                            <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                                <select ref={this.paisRef}>\r\n                                    <option value=\"\" defaultValue>Elige un pais</option>\r\n                                    <option value=\"AR\">Argentina</option>\r\n                                    <option value=\"CO\">Colombia</option>\r\n                                    <option value=\"CR\">Costa Rica</option>\r\n                                    <option value=\"ES\">Espana</option>\r\n                                    <option value=\"US\">Estados Unidos</option>\r\n                                    <option value=\"MX\">Mexico</option>\r\n                                    <option value=\"PE\">Peru</option>\r\n                                    <option value=\"VE\">Venezuela</option>\r\n                                </select>\r\n                                <label htmlFor=\"pais\">Pais: </label>\r\n                            </div>\r\n                            \r\n                            <div className=\"input-field col s12 m8 l4 offset-m2 buscador\">\r\n                                <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accend-4\" value=\"Buscar...\" />\r\n                            </div>\r\n\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nFormulario.propTypes ={\r\n    datosConsulta: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = (props) => {\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6 offset-m3\">\r\n                    <div className=\"card-panel red darken-4 error\">\r\n                        {props.mensaje}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Error;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Clima extends Component {\r\n\r\n    //metodo para mostrar resultado si ya tenemos valores\r\n    \r\n    mostrarResultado = () => {\r\n        //obtener los datos de la consulta\r\n        const {name, weather, main} = this.props.resultado;\r\n\r\n        if(!name || !weather || !main) return null;\r\n        \r\n        const kelvin = 273.15;\r\n\r\n        const urlIcono = `https://openweathermap.org/img/w/${weather[0].icon}.png`;\r\n\r\n        const alt = `clima de ${name}`;\r\n\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\r\n                    <div className=\"card-panel light-blue align-center\">\r\n                        <span className=\"white-text\">\r\n                            <h2>Resultado Clima de: {name}</h2>\r\n                            <p className=\"temperatura\">\r\n                                Actual: { (main.temp - kelvin).toFixed(2) } &deg;C\r\n                                <img src={urlIcono} alt={alt}/>                               \r\n                            </p>\r\n                            <p> Max. {(main.temp_max - kelvin).toFixed(2)} &deg;C</p>\r\n                            <p> Min. {(main.temp_min - kelvin).toFixed(2)} &deg;C</p>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n \r\n            <div className=\"container\">\r\n                {this.mostrarResultado()}\r\n            </div>\r\n\r\n         );\r\n    }\r\n}\r\n\r\nClima.propTypes = {\r\n    resultado : PropTypes.object.isRequired\r\n}\r\n \r\nexport default Clima;","import React, {Component} from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport Error from './componentes/Error';\nimport Clima from './componentes/Clima';\n\nclass App extends Component {\n\tstate = { \n\t\terror : '',\n\t\tconsulta : {},\n\t\tresultado : {}\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.setState({\n\t\t\terror: false\n\t\t})\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState){\n\t\tif(prevState.consulta !== this.state.consulta){\n\t\t\tthis.consultarApi();\n\t\t}\t\n\t}\n\n\tconsultarApi = () => {\n\t\tconst {ciudad, pais} = this.state.consulta;\n\n\t\tif(!ciudad || !pais) return null;\n\n\t\t//leer la url y agregar el API Key\n\t\tconst apiId = 'f91361620e21119c2f7af684998b1247';\n\n\t\tlet url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&APPID=${apiId}`;\n\n\t\tconsole.log(url);\n\n\t\t//query con Fetch api  ===> aqui vamos a hacer promises\n\t\tfetch(url)\n\t\t\t.then(respuesta => {\n\t\t\t\treturn respuesta.json();\n\t\t\t})\n\t\t\t.then(datos => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tresultado : datos\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.log(error);\n\t\t\t})\n\t}\n\n\tdatosConsulta = respuesta => {\t\t\n\t\tif(respuesta.ciudad===\"\" || respuesta.pais===\"\"){\n\t\t\tthis.setState({\n\t\t\t\terror: true\n\t\t\t})\n\t\t}else{\n\t\t\tthis.setState({\n\t\t\t\terror: false,\n\t\t\t\tconsulta: respuesta\n\t\t\t})\n\t\t}\n\t}\n\n\trender() { \n\n\t\tconst {error} = this.state,\n\t\t\t\t{cod} = this.state.resultado\n\t\t;\n\n\t\tlet resultado;\n\n\t\tif(error){\n\t\t\tresultado = <Error mensaje = 'Todos los campos son obligatorios'/>\n\t\t}else if(cod === \"404\"){\n\t\t\tresultado = <Error mensaje='Ciudad NO encontrada' />\n\t\t}else{\n\t\t\tresultado = <Clima resultado = {this.state.resultado}/>\n\t\t}\n\n\t\treturn ( \n\t\t\t<div className = \"app\">\n\t\t\t\t<Header \n\t\t\t\t\ttitulo = 'Clima React'\n\t\t\t\t/>\n\t\t\t\t<Formulario\n\t\t\t\t\tdatosConsulta = {this.datosConsulta}\n\t\t\t\t/>\n\t\t\t\t{resultado}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}